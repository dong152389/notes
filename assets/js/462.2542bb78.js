(window.webpackJsonp=window.webpackJsonp||[]).push([[462],{1735:function(e,n,o){"use strict";o.r(n);var t=o(26),i=Object(t.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"cookieutils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cookieutils"}},[this._v("#")]),this._v(" CookieUtils")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('package com.dfd.leeshop.commons.utils;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\n\n/**\n * Cookie 工具类\n * <p>Title: CookieUtils</p>\n * <p>Description: </p>\n *\n * \n * \n * @date 2017/12/10 22:00\n */\npublic final class CookieUtils {\n\n    /**\n     * 得到Cookie的值, 不编码\n     *\n     * @param request\n     * @param cookieName\n     * @return\n     */\n    public static String getCookieValue(HttpServletRequest request, String cookieName) {\n        return getCookieValue(request, cookieName, false);\n    }\n\n    /**\n     * 得到Cookie的值,\n     *\n     * @param request\n     * @param cookieName\n     * @return\n     */\n    public static String getCookieValue(HttpServletRequest request, String cookieName, boolean isDecoder) {\n        Cookie[] cookieList = request.getCookies();\n        if (cookieList == null || cookieName == null) {\n            return null;\n        }\n        String retValue = null;\n        try {\n            for (int i = 0; i < cookieList.length; i++) {\n                if (cookieList[i].getName().equals(cookieName)) {\n                    if (isDecoder) {\n                        retValue = URLDecoder.decode(cookieList[i].getValue(), "UTF-8");\n                    } else {\n                        retValue = cookieList[i].getValue();\n                    }\n                    break;\n                }\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return retValue;\n    }\n\n    /**\n     * 得到Cookie的值,\n     *\n     * @param request\n     * @param cookieName\n     * @return\n     */\n    public static String getCookieValue(HttpServletRequest request, String cookieName, String encodeString) {\n        Cookie[] cookieList = request.getCookies();\n        if (cookieList == null || cookieName == null) {\n            return null;\n        }\n        String retValue = null;\n        try {\n            for (int i = 0; i < cookieList.length; i++) {\n                if (cookieList[i].getName().equals(cookieName)) {\n                    retValue = URLDecoder.decode(cookieList[i].getValue(), encodeString);\n                    break;\n                }\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return retValue;\n    }\n\n    /**\n     * 设置Cookie的值 不设置生效时间默认浏览器关闭即失效,也不编码\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue) {\n        setCookie(request, response, cookieName, cookieValue, -1);\n    }\n\n    /**\n     * 设置Cookie的值 在指定时间内生效,但不编码\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue, int cookieMaxage) {\n        setCookie(request, response, cookieName, cookieValue, cookieMaxage, false);\n    }\n\n    /**\n     * 设置Cookie的值 不设置生效时间,但编码\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue, boolean isEncode) {\n        setCookie(request, response, cookieName, cookieValue, -1, isEncode);\n    }\n\n    /**\n     * 设置Cookie的值 在指定时间内生效, 编码参数\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue, int cookieMaxage, boolean isEncode) {\n        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, isEncode);\n    }\n\n    /**\n     * 设置Cookie的值 在指定时间内生效, 编码参数(指定编码)\n     */\n    public static void setCookie(HttpServletRequest request, HttpServletResponse response, String cookieName,\n                                 String cookieValue, int cookieMaxage, String encodeString) {\n        doSetCookie(request, response, cookieName, cookieValue, cookieMaxage, encodeString);\n    }\n\n    /**\n     * 删除Cookie带cookie域名\n     */\n    public static void deleteCookie(HttpServletRequest request, HttpServletResponse response,\n                                    String cookieName) {\n        doSetCookie(request, response, cookieName, "", -1, false);\n    }\n\n    /**\n     * 设置Cookie的值，并使其在指定时间内生效\n     *\n     * @param cookieMaxage cookie生效的最大秒数\n     */\n    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,\n                                          String cookieName, String cookieValue, int cookieMaxage, boolean isEncode) {\n        try {\n            if (cookieValue == null) {\n                cookieValue = "";\n            } else if (isEncode) {\n                cookieValue = URLEncoder.encode(cookieValue, "utf-8");\n            }\n            Cookie cookie = new Cookie(cookieName, cookieValue);\n            if (cookieMaxage > 0)\n                cookie.setMaxAge(cookieMaxage);\n            if (null != request) {// 设置域名的cookie\n                String domainName = getDomainName(request);\n//                System.out.println(domainName);\n                if (!"localhost".equals(domainName)) {\n                    cookie.setDomain(domainName);\n                }\n            }\n            cookie.setPath("/");\n            response.addCookie(cookie);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 设置Cookie的值，并使其在指定时间内生效\n     *\n     * @param cookieMaxage cookie生效的最大秒数\n     */\n    private static final void doSetCookie(HttpServletRequest request, HttpServletResponse response,\n                                          String cookieName, String cookieValue, int cookieMaxage, String encodeString) {\n        try {\n            if (cookieValue == null) {\n                cookieValue = "";\n            } else {\n                cookieValue = URLEncoder.encode(cookieValue, encodeString);\n            }\n            Cookie cookie = new Cookie(cookieName, cookieValue);\n            if (cookieMaxage > 0)\n                cookie.setMaxAge(cookieMaxage);\n            if (null != request) {// 设置域名的cookie\n                String domainName = getDomainName(request);\n//                System.out.println(domainName);\n                if (!"localhost".equals(domainName)) {\n                    cookie.setDomain(domainName);\n                }\n            }\n            cookie.setPath("/");\n            response.addCookie(cookie);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 得到cookie的域名\n     */\n    private static final String getDomainName(HttpServletRequest request) {\n        String domainName = null;\n\n        String serverName = request.getRequestURL().toString();\n        if (serverName == null || serverName.equals("")) {\n            domainName = "";\n        } else {\n            serverName = serverName.toLowerCase();\n            serverName = serverName.substring(7);\n            final int end = serverName.indexOf("/");\n            serverName = serverName.substring(0, end);\n            final String[] domains = serverName.split("\\\\.");\n            int len = domains.length;\n            if (len > 3) {\n                // www.xxx.com.cn\n                domainName = "." + domains[len - 3] + "." + domains[len - 2] + "." + domains[len - 1];\n            } else if (len <= 3 && len > 1) {\n                // xxx.com or xxx.cn\n                domainName = "." + domains[len - 2] + "." + domains[len - 1];\n            } else {\n                domainName = serverName;\n            }\n        }\n\n        if (domainName != null && domainName.indexOf(":") > 0) {\n            String[] ary = domainName.split("\\\\:");\n            domainName = ary[0];\n        }\n        return domainName;\n    }\n\n}\n')])])])])}),[],!1,null,null,null);n.default=i.exports}}]);