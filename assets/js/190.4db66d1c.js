(window.webpackJsonp=window.webpackJsonp||[]).push([[190],{1099:function(s,t,e){s.exports=e.p+"assets/img/image-20221221164159244.9c58d1a5.png"},1626:function(s,t,e){"use strict";e.r(t);var a=e(26),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"会话管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#会话管理"}},[s._v("#")]),s._v(" 会话管理")]),s._v(" "),a("h2",{attrs:{id:"sessionmanager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sessionmanager"}},[s._v("#")]),s._v(" SessionManager")]),s._v(" "),a("p",[s._v("会话管理器，负责创建和管理用户的会话（Session）生命周期，它能够在任何环境中在本地管理用户会话，即使没有Web / Servlet / EJB容器，也一样可以保存会话。默认情况下，Shiro会检测当前环境中现有的会话机制（比如Servlet容器）进行适配，如果没有 （比如独立应用程序或者非Web环境），它将会使用内置的企业会话管理器来提供相应的会话管理服务，其中还涉及一个名为SessionDAO的对象。SessionDAO负责Session的持久化操 作（CRUD），允许Session数据写入到后端持久化数据库。")]),s._v(" "),a("h2",{attrs:{id:"会话管理实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#会话管理实现"}},[s._v("#")]),s._v(" 会话管理实现")]),s._v(" "),a("p",[s._v("SessionManager由SecurityManager管理。Shiro提供了三种实现")]),s._v(" "),a("p",[a("img",{attrs:{src:e(1099),alt:"image-20221221164159244"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("DefaultSessionManager：用于JavaSE环境")])]),s._v(" "),a("li",[a("p",[s._v("ServletContainerSessionManager：用于web环境，直接使用Servlet容器的会话")])]),s._v(" "),a("li",[a("p",[s._v("DefaultWebSessionManager：用于web环境，自己维护会话（不使用Servlet容器的 会话管理）")])])]),s._v(" "),a("h2",{attrs:{id:"获得-session-方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获得-session-方式"}},[s._v("#")]),s._v(" 获得 Session 方式")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Session")]),s._v(" session "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SecurityUtils")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSubject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSession")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsession"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAttribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("“key”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("”value”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Controller 中的 request，在 Shiro 过滤器中的 doFilerInternal 方法，被包装成 ShiroHttpServletRequest。SecurityManager 和 SessionManager 会话管理器决定 session 来源于 ServletRequest 还是由 Shiro 管理的会话。无论是通过 request.getSession 或 subject.getSession 获取到 session，操作 session，两者都是等价的。")])])}),[],!1,null,null,null);t.default=n.exports}}]);