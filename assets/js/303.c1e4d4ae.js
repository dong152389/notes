(window.webpackJsonp=window.webpackJsonp||[]).push([[303],{1454:function(t,s,a){"use strict";a.r(s);var n=a(26),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"gradle-中的文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gradle-中的文件操作"}},[t._v("#")]),t._v(" Gradle 中的文件操作")]),t._v(" "),a("p",[t._v("几种常见的文件操作方式：")]),t._v(" "),a("ul",[a("li",[t._v("本地文件")]),t._v(" "),a("li",[t._v("文件集合")]),t._v(" "),a("li",[t._v("文件树")]),t._v(" "),a("li",[t._v("文件拷贝")]),t._v(" "),a("li",[t._v("归档文件")])]),t._v(" "),a("h2",{attrs:{id:"本地文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地文件"}},[t._v("#")]),t._v(" 本地文件")]),t._v(" "),a("p",[t._v("使用 Project."),a("font",{attrs:{color:"red"}},[t._v("file(java.lang.Object)")]),t._v("方法，通过指定文件的"),a("font",{attrs:{color:"red"}},[t._v("相对路径或绝对路径")]),t._v("来对文件的操作,其中相对路径为相对当前project[根 project 或者子 project]的目录。"),a("font",{attrs:{color:"red"}},[t._v("其实使用 Project.file(java.lang.Object)方法创建的 File 对象就是 Java 中的 File 对象")]),t._v("，我们可以使用它就像在 Java 中使用一样。示例代码如下：")],1),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用相对路径")]),t._v("\nFile configFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/conf.xml'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconfigFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNewFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用绝对路径")]),t._v("\nconfigFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'D:\\\\conf.xml'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNewFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用一个文件对象")]),t._v("\nconfigFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/config.xml'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("configFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exists")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"文件集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件集合"}},[t._v("#")]),t._v(" 文件集合")]),t._v(" "),a("p",[t._v("文 件 集 合 就 是 一 组 文 件 的 列 表 , 在 Gradle 中 , 文 件 集 合 用 FileCollection 接 口 表 示 。 我 们 可 以 使 用\nProject.files(java.lang.Object[])方法来获得一个文件集合对象，如下代码创建一个 FileCollection 实例：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" collection "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("files")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/test1.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/test2.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/test3.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/test4.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ncollection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" File it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n    it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNewFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建该文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    println it.name //输出文件名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nSet set1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("files "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把文件集合转换为java中的Set类型")]),t._v("\nSet set2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" collection "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Set\nList list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" collection "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" List"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把文件集合转换为java中的List类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//for (item in list) {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    println item.name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" union "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("files")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/test5.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加或者删除一个集合")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" minus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" union "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("files")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/test3.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nminus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" File it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n    println it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对于文件集合我们可以遍历它；也可以把它转换成 java 类型；同时还能使用+来添加一个集合，或使用-来删除集合。")]),t._v(" "),a("h2",{attrs:{id:"文件树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件树"}},[t._v("#")]),t._v(" 文件树")]),t._v(" "),a("p",[a("font",{attrs:{color:"red"}},[t._v("文件树是有层级结构的文件集合")]),t._v("，一个文件树它可以代表一个目录结构或一 ZIP 压缩包中的内容结构。"),a("font",{attrs:{color:"blue"}},[t._v("文件树是从文件集合继承过来的")]),t._v("，"),a("font",{attrs:{color:"red"}},[t._v("所以文件树具有文件集合所有的功能")]),t._v("。我们可以使用 "),a("font",{attrs:{color:"blue"}},[t._v("Project.fileTree(java.util.Map)")]),t._v("方法来创建文件树对象，还可以使用过虑条件来包含或排除相关文件。示例代码如下")],1),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一种方式:使用路径创建文件树对象，同时指定包含的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" tree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fileTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("include")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*.java'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第二种方式:通过闭包创建文件树:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//tree = fileTree('src/main') {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    include '**/*.java'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第三种方式:通过路径和闭包创建文件树：具名参数给map传值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//tree = fileTree(dir: 'src/main', include: '**/*.java') ")]),t._v("\ntree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fileTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" includes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*.java'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*.xml'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exclude"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*test*/**'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("each "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" File file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历文件树的所有文件")]),t._v("\n    println file\n    println file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"文件拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件拷贝"}},[t._v("#")]),t._v(" 文件拷贝")]),t._v(" "),a("p",[t._v("我们可以使用 Copy 任务来拷贝文件，通过它可以过虑指定拷贝内容，还能对文件进行重命名操作等。Copy 任务必须指定一组需要拷贝的文件和拷贝到的目录，这里使用 CopySpec.from(java.lang.Object[])方法指定原文件；使用 CopySpec.into(java.lang.Object)方法指定目标目录。示例代码如下")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将resources下的文件拷贝到build的config文件夹下")]),t._v("\ntask "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main/resources'")]),t._v("\n    into "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'build/config'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("from()方法接受的参数和文件集合时 files()一样。")]),t._v(" "),a("ul",[a("li",[t._v("当参数为一个目录时，该目录下所有的文件都会被拷贝到指定目录下（目录自身不会被拷贝）。")]),t._v(" "),a("li",[t._v("当参数为一个文件时，该文件会被拷贝到指定目录。")]),t._v(" "),a("li",[t._v("如果参数指定的文件不存在，就会被忽略；当参数为一个 Zip 压缩文件，该压缩文件的内容会被拷贝到指定目录。")])]),t._v(" "),a("p",[t._v("into()方法接受的参数与本地文件时 file()一样。 示例代码如下：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("task "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyTask2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝src/main/webapp目录下所有的文件")]),t._v("\n    from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main/webapp'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝单独的一个文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//    from 'src/main/java/com/example/boot/CcProperties.java'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从Zip压缩文件中拷贝内容")]),t._v("\n    from "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("zipTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main/assets.zip'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拷贝到的目标目录")]),t._v("\n    into "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'build/explodedWar'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在拷贝文件的时候还可以添加过虑条件来指定包含或排除的文件，示例如下：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("task "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyTaskWithPatterns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main/webapp'")]),t._v("\n    into "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'build/explodedWar'")]),t._v("\n    include "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*.html'")]),t._v("\n    include "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*.jsp'")]),t._v("\n    exclude "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" details "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" details"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在拷贝文件的时候还可以对文件进行重命名操作，示例如下：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("task "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Copy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main/webapp'")]),t._v("\n    into "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'build/explodedWar'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用一个闭包方式重命名文件")]),t._v("\n    rename "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" String fileName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("\n        fileName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-staging-'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在上面的例子中我们都是使用 Copy 任务来完成拷贝功能的，那么有没有另外一种方式呢？答案是肯定的，那就是Project.copy(org.gradle.api.Action)方法。下面示例展示了 copy()方法的使用方式：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("task copyMethod "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    doLast "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        copy "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main/webapp'")]),t._v("\n            into "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'build/explodedWar'")]),t._v("\n            include "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*.html'")]),t._v("\n            include "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'**/*.jsp'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("或者使用 project 对象的 copy 方法：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("copy "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相对路径或者绝对路径")]),t._v("\n    from "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main/resources/ddd.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//file也可以换成new File()")]),t._v("\n    into "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buildDir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("absolutePath\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("执行 "),a("code",[t._v("gradle build")]),t._v(" 指令即可。去 build 目录的本地磁盘查看，就能看到。")]),t._v(" "),a("h2",{attrs:{id:"归档文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#归档文件"}},[t._v("#")]),t._v(" 归档文件")]),t._v(" "),a("p",[t._v("通常一个项目会有很多的 Jar 包，我们希望把项目打包成一个 WAR，ZIP 或 TAR 包进行发布，这时我们就可以使用 Zip，Tar，Jar，War 和 Ear 任务来实现，不过它们的用法都一样，所以在这里我只介绍 Zip 任务的示例。首先，创建一个 Zip 压缩文件,并指定压缩文件名称，如下代码所示：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("apply plugin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'java'")]),t._v("\nversion "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("\ntask "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myZip")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Zip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    from "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/main'")]),t._v("\n    into "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'build'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保存到build目录中")]),t._v("\n    baseName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myZIP'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nprintln myZip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("archiveName\n")])])]),a("p",[t._v("执行命令 "),a("code",[t._v("gradle -q myZip")]),t._v("，会在 build 文件夹 distributions 中生成 myZIP-1.0.zip")]),t._v(" "),a("p",[t._v("最后，我们可以使用 Project.zipTree(java.lang.Object)和 Project.tarTree(java.lang.Object)方法来创建访问 Zip 压缩包的文件树对象，示例代码如下：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用zipTree")]),t._v("\nFileTree zip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("zipTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'build/distributions/myZIP-1.0.zip'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用tarTree")]),t._v("\nFileTree tar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tarTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'someFile.tar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在这里，我们介绍了 Gradle 对本地文件、文件集合、文件树、文件拷贝和归档文件的操作方式。更详细的请参考官方文档："),a("a",{attrs:{href:"https://docs.gradle.org/current/userguide/working_with_files.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Working With Files (gradle.org)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);